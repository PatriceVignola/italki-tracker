# source: http://localhost:4000/graphql
# timestamp: Fri Jun 29 2018 04:38:57 GMT+0900 (KST)

input AddStudentData {
  italkiId: Int!
  skypeUsername: String
  weChatUsername: String
  email: String
}

type AddStudentResult {
  newStudentEdge: StudentEdge!
}

type Document implements Node {
  id: ID!
  checksum: String!
  fileName: String!
  students: [Student]
}

enum Gender {
  Unspecified
  Female
  Male
}

scalar Int52

type ItalkiLanguage {
  id: ID!
  hasCourse: Boolean
  canTeach: Boolean
  name: String
  level: ItalkiLanguageLevel
  priority: Int
  teaching: Boolean
  learning: Boolean
}

scalar ItalkiLanguageLevel

type ItalkiProfile implements Node {
  id: ID!
  locale: String
  localTime: String
  avatarUrl: String
  premium: Boolean
  shortIntroduction: String
  interest: String
  allowContent: Boolean
  livingCountryCode: String
  originCountryCode: String
  livingCityCode: String
  originCityCode: String
  originCityName: String
  livingCityName: String
  timezone: String
  timezoneUtc: String
  timezoneLocation: String
  timezoneIana: String
  languages(level: ItalkiLanguageLevel, learning: Boolean, teaching: Boolean): [ItalkiLanguage]
  lastLoginTime: String
  firstPurchaseTime: String
  registerTime: String
  twitterUrl: String
  facebookUrl: String
  linkedinUrl: String
  activityPoints: Int
  allowMessage: Boolean
  notebookCount: Int
  friendCount: Int
  discussionCount: Int
  hasSkype: Boolean
  online: Boolean
  nickname: String
  isTutor: Boolean
  questionCount: Int
  gender: Gender
  sessionCount: Int
  professional: Boolean
  friendListPublic: Boolean
}

input LinkSkypeAccountData {
  username: String!
  password: String!
}

type Mutation {
  signin(data: SigninData!): User
  signup(data: SignupData!): User
  linkSkypeAccount(data: LinkSkypeAccountData!): SkypeTokens
  signinToSkype(data: SigninToSkypeData!): SkypeTokens
  addStudent(data: AddStudentData!): AddStudentResult!
  sendDocument(data: SendDocumentData!): Document
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  user: User
  italkiProfile(id: ID!): ItalkiProfile
  node(id: ID!): Node
}

input SendDocumentData {
  studentId: ID!
  checksum: String!
  fileName: String!
}

input SigninData {
  email: String!
  password: String!
}

input SigninToSkypeData {
  password: String!
}

input SignupData {
  email: String!
  password: String!
}

type SkypeProfile {
  username: ID!
  avatarUrl: String
  birthday: String
  city: String
  countryCode: String
  emails: [String]
  firstName: String
  gender: Gender
  homePage: String
  jobTitle: String
  languageCode: String
  lastName: String
  namespace: String
  phoneHome: String
  phoneMobile: String
  phoneOffice: String
  province: String
  richMood: String
}

type SkypeTokens {
  skypeToken: String!
  skypeTokenExpiration: Int52!
  registrationToken: String!
  registrationTokenExpiration: Int52!
}

type Student implements Node {
  id: ID!
  italkiId: Int!
  skypeUsername: String
  weChatUsername: String
  email: String
  italkiProfile: ItalkiProfile
  skypeProfile: SkypeProfile
  documents: [Document]
}

type StudentConnection {
  pageInfo: PageInfo!
  edges: [StudentEdge]
}

type StudentEdge {
  node: Student
  cursor: String!
}

type User implements Node {
  id: ID!
  jwt: String
  email: String
  skypeUsername: String
  students(first: Int!, last: Int!): StudentConnection
  documents: [Document]
}
